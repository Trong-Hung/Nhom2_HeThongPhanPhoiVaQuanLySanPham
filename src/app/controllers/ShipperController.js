const DonHang = require("../models/DonHang");
const User = require("../models/User");
const axios = require("axios");

const { getRoute, geocode } = require("../../util/mapService");








class ShipperController {
  // üî• Hi·ªÉn th·ªã danh s√°ch ƒë∆°n h√†ng "ƒêang s·∫Øp x·∫øp" theo v√πng c·ªßa shipper
  async showPendingOrders(req, res) {
    try {
      if (!req.session.user || req.session.user.role !== "shipper") {
        return res.status(403).send("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ƒë∆°n h√†ng.");
      }
      


      const shipperRegion = req.session.user.region;
      console.log("üìå Ki·ªÉm tra v√πng mi·ªÅn shipper:", shipperRegion);

      const orders = await DonHang.find({ status: "ƒêang s·∫Øp x·∫øp", region: shipperRegion });
      console.log("üì¶ ƒê∆°n h√†ng ƒëang s·∫Øp x·∫øp:", orders);
      console.log("üì¶ K·∫øt qu·∫£ truy v·∫•n ƒë∆°n h√†ng:", orders);

      res.render("shipper/dang_sap_xep", { orders });
    } catch (err) {
      console.error("‚ùå L·ªói khi t·∫£i ƒë∆°n h√†ng:", err);
      res.status(500).send("L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau.");
    }
  }

  // üî• Hi·ªÉn th·ªã danh s√°ch ƒë∆°n h√†ng "ƒêang v·∫≠n chuy·ªÉn" m√† shipper ƒëang giao
 async showActiveOrders(req, res) {
  try {
    if (!req.session.user || req.session.user.role !== "shipper") {
      return res.status(403).send("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ƒë∆°n h√†ng.");
    }

    // üî• Ki·ªÉm tra d·ªØ li·ªáu shipper trong session
    console.log("üìå Ki·ªÉm tra to√†n b·ªô session user:", req.session.user);

    const shipperId = req.session.user._id;
    const shipperRegion = req.session.user.region;

    if (!shipperId || !shipperRegion) {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin shipper.");
      return res.status(400).send("L·ªói: Kh√¥ng c√≥ th√¥ng tin v√πng mi·ªÅn c·ªßa shipper.");
    }

    console.log("üìå ID shipper:", shipperId);
    console.log("üìå V√πng mi·ªÅn shipper:", shipperRegion);

    // üî• Ki·ªÉm tra c√≥ ƒë∆°n h√†ng n√†o ƒë√∫ng v·ªõi v√πng mi·ªÅn v√† shipper kh√¥ng
    const orders = await DonHang.find({ status: "ƒêang v·∫≠n chuy·ªÉn", assignedShipper: shipperId, region: shipperRegion });

    console.log("üì¶ ƒê∆°n h√†ng ƒëang v·∫≠n chuy·ªÉn:", orders.length > 0 ? orders : "‚ùå Kh√¥ng c√≥ ƒë∆°n h√†ng ph√π h·ª£p");

    res.render("shipper/dang_van_chuyen", { orders });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i ƒë∆°n h√†ng:", err);
    res.status(500).send("L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau.");
  }
}


  // üî• API x√°c nh·∫≠n ƒë∆°n h√†ng t·ª´ "ƒêang s·∫Øp x·∫øp" ‚Üí "ƒêang v·∫≠n chuy·ªÉn"
  async confirmOrder(req, res) {
  try {
    const orderId = req.params.id;
    const shipperId = req.session.user._id;
    const shipperRegion = req.session.user.region;

    console.log("üìå X√°c nh·∫≠n ƒë∆°n h√†ng:", { orderId, shipperId, shipperRegion });

    const order = await DonHang.findById(orderId);
    if (!order) {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng.");
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng." });
    }

    if (order.status !== "ƒêang s·∫Øp x·∫øp") {
      console.log("‚ùå ƒê∆°n h√†ng kh√¥ng h·ª£p l·ªá:", order.status);
      return res.status(400).json({ success: false, message: "ƒê∆°n h√†ng kh√¥ng ·ªü tr·∫°ng th√°i h·ª£p l·ªá." });
    }

    // üî• C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† shipper nh·∫≠n ƒë∆°n
    order.assignedShipper = shipperId;
    order.status = "ƒêang v·∫≠n chuy·ªÉn";
    await order.save();

    console.log(`‚úÖ ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c giao cho shipper ${shipperId} t·∫°i v√πng ${shipperRegion}`);

    res.json({ success: true });
  } catch (err) {
    console.error("‚ùå L·ªói khi x√°c nh·∫≠n ƒë∆°n h√†ng:", err);
    res.status(500).json({ success: false, message: "L·ªói h·ªá th·ªëng." });
  }
}


  // üî• API ch·ªâ ƒë∆∞·ªùng t·ª´ v·ªã tr√≠ shipper ƒë·∫øn ƒë·ªãa ch·ªâ giao h√†ng







  // üî• C√°c ph∆∞∆°ng th·ª©c trong class c·ªßa b·∫°n

async getDirections(req, res) {
    try {
        const orderId = req.params.id;
        const order = await DonHang.findById(orderId);

        if (!order || order.status !== "ƒêang v·∫≠n chuy·ªÉn") {
            console.error("‚ùå ƒê∆°n h√†ng ch∆∞a ƒë∆∞·ª£c nh·∫≠n ho·∫∑c kh√¥ng h·ª£p l·ªá.");
            return res.status(404).send("‚ùå ƒê∆°n h√†ng ch∆∞a ƒë∆∞·ª£c nh·∫≠n ho·∫∑c kh√¥ng h·ª£p l·ªá.");
        }

        let warehouseLocation = "Qu·∫≠n 1, Th√†nh ph·ªë H·ªì Ch√≠ Minh";
        let destinationLocation = order.address;

        console.log("üìå ƒê·ªãa ch·ªâ giao h√†ng:", destinationLocation);

        const warehouseCoords = await geocode(warehouseLocation);
        const destinationCoords = await geocode(destinationLocation);

        if (!warehouseCoords || !destinationCoords) {
            console.error("‚ùå Kh√¥ng th·ªÉ l·∫•y t·ªça ƒë·ªô!");
            return res.status(404).send("Kh√¥ng th·ªÉ l·∫•y t·ªça ƒë·ªô.");
        }

        console.log("üìå T·ªça ƒë·ªô xu·∫•t ph√°t:", warehouseCoords);
        console.log("üìå T·ªça ƒë·ªô ƒëi·ªÉm giao h√†ng:", destinationCoords);

        // üî• G·ª≠i request t√¨m ƒë∆∞·ªùng v·ªõi `steps=true` ƒë·ªÉ l·∫•y h∆∞·ªõng d·∫´n di chuy·ªÉn
        const route = await getRoute(
            `${warehouseCoords.lat},${warehouseCoords.lon}`,
            `${destinationCoords.lat},${destinationCoords.lon}`,
            { steps: true, overview: "full", geometries: "geojson" } // üî• B·∫≠t h∆∞·ªõng d·∫´n chi ti·∫øt
        );

        if (!route) {
            console.error("‚ùå Kh√¥ng t√¨m th·∫•y tuy·∫øn ƒë∆∞·ªùng.");
            return res.status(404).send("Kh√¥ng t√¨m th·∫•y tuy·∫øn ƒë∆∞·ªùng.");
        }

        console.log(`‚úÖ L·ªô tr√¨nh t√¨m th·∫•y:`);
        console.log(`üìè Kho·∫£ng c√°ch: ${(route.distance / 1000).toFixed(2)} km`);
        console.log(`‚è≥ Th·ªùi gian d·ª± ki·∫øn: ${Math.round(route.duration / 60)} ph√∫t`);
        console.log("üî• D·ªØ li·ªáu tuy·∫øn ƒë∆∞·ªùng:", route.geometry.coordinates);
        console.log("üî• Ki·ªÉm tra to√†n b·ªô ph·∫£n h·ªìi API:", JSON.stringify(route, null, 2));


        // üî• Ki·ªÉm tra xem API c√≥ tr·∫£ v·ªÅ d·ªØ li·ªáu `steps` hay kh√¥ng
        if (!route.legs || !route.legs[0] || !route.legs[0].steps || route.legs[0].steps.length === 0) {
            console.error("‚ùå Kh√¥ng c√≥ h∆∞·ªõng d·∫´n di chuy·ªÉn t·ª´ API!");
        } else {
            console.log("‚úÖ H∆∞·ªõng d·∫´n di chuy·ªÉn:");
            route.legs[0].steps.forEach((step, index) => {
                console.log(`#${index + 1}: ${step.maneuver.instruction} - üìè ${(step.distance / 1000).toFixed(2)} km, ‚è≥ ${Math.round(step.duration / 60)} ph√∫t`);
            });
        }

        // üî• Tr√≠ch xu·∫•t t·ª´ng b∆∞·ªõc h∆∞·ªõng d·∫´n di chuy·ªÉn
        const steps = route.legs[0].steps.map(step => ({
            distance: (step.distance / 1000).toFixed(2) + " km",
            duration: Math.round(step.duration / 60) + " ph√∫t",
            instruction: step.maneuver.instruction
        }));

        res.render("shipper/maps", {
            routePath: JSON.stringify(route.geometry.coordinates),
            route: route,
            order: order,
            steps: steps
        });

    } catch (err) {
        console.error(`‚ùå L·ªói h·ªá th·ªëng khi l·∫•y ch·ªâ ƒë∆∞·ªùng: ${err.message}`);
        res.status(500).send("L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau.");
    }
}


}










module.exports = new ShipperController();
